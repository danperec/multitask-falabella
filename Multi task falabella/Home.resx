<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        OW8d5zJ7y88AAAAASUVORK5CYII=
</value>
  </data>
</root>